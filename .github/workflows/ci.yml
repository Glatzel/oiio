name: CI

permissions:
  contents: write

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches: main
    paths-ignore:
      - "*.md"
      - ".pre-commit-config.yaml"
  pull_request:
    paths-ignore:
      - "*.md"
      - ".pre-commit-config.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  cache-vcpkg:
    if: ${{ github.event_name=='pull_request'}}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ./ocio_dep/vcpkg_installed
          key: vcpkg-${{ hashFiles('./ocio_dep/vcpkg.json') }}
      
      - name: install vcpkg dependencies
        if: ${{steps.cache-vcpkg.outputs.cache-hit==''}}
        run: ./scripts/install-vcpkg-dep.ps1
        
  build-release:
    needs: cache-vcpkg
    if: ${{ ! failure() }}
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: restore vcpkg
        if: ${{ github.event_name == 'pull_request'}}
        id: cache-vcpkg
        uses: actions/cache/restore@v4
        with:
          path: ./ocio_dep/vcpkg_installed
          key: vcpkg-${{ hashFiles('./ocio_dep/vcpkg.json') }}

      - name: version-check
        id: version-check
        run: |
          $version=gh release view -R AcademySoftwareFoundation/OpenImageIO --json tagName -q .tagName
          echo "version=$version" >> "$env:GITHUB_OUTPUT"
          Write-Output "openimageio src: $version"

          $current_versions=gh release list -R Glatzel/oiio --json tagName

          write-output $current_versions

          if("$current_versions".Contains("$version")){
            echo "new_version=false" >> "$env:GITHUB_OUTPUT"
            write-output "No new version found, skip build."
          }
          else{
            echo "new_version=true" >> "$env:GITHUB_OUTPUT"
            write-output "New version found, $version"
          }

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          run-install: false

      - run: pixi install --all

      - name: clone ocio and oiio
        run: ./scripts/clone-repo.ps1 "${{steps.version-check.outputs.version}}"

      - name: install vcpkg
        run: ./scripts/install-vcpkg-dep.ps1

      - name: build ocio
        run: ./scripts/build-ocio.ps1

      - name: build oiio
        run: ./scripts/build-oiio.ps1

      - name: copy item
        run: ./scripts/copy-item.ps1
        continue-on-error: true

      - name: Pack
        run: Compress-Archive -Path ./openimageio -DestinationPath ./openimageio-windows-${{steps.version-check.outputs.version}}.zip -PassThru

      - uses: actions/upload-artifact@v4
        with:
          name: openimageio-windows-${{steps.version-check.outputs.version}}
          path: openimageio-windows-${{steps.version-check.outputs.version}}.zip
          if-no-files-found: error

      - name: oiiotool info
        run: ./openimageio/oiiotool.exe --help

      - name: build info
        run: |
          '| Dependency     | Version   |'> build_info.md
          '|----------------|-----------|'>> build_info.md

          $content = ./openimageio/oiiotool.exe --help | Select-String "Dependencies: "
          $content = "$content" -replace "Dependencies:", ""
          $content = "$content" -replace ", ", "|`n|"
          $content = "$content" -replace " ", "|"
          $content = "$content" + '|'
          $content >> build_info.md

      - name: Job Sammary
        run: |
          "## OpenImageIO ${{steps.version-check.outputs.version}}" >> $env:GITHUB_STEP_SUMMARY
          Get-Content -Path ./build_info.md >> $env:GITHUB_STEP_SUMMARY

      - name: Create Release
        if: ${{ github.event_name=='workflow_dispatch'||(github.event_name=='schedule' && steps.version-check.outputs.new_version =='true') }}
        uses: softprops/action-gh-release@v2
        with:
          body_path: build_info.md
          files: openimageio-windows-${{steps.version-check.outputs.version}}.zip
          tag_name: ${{steps.version-check.outputs.version}}
